module test_FieldDictEntry
    use gFTL_StringVector
    use FieldDictEntry_mod
    use pFunit

    implicit none

contains
    @test
    subroutine test_init_FieldDictEntry()
        type(FieldDictEntry) :: dict_entry
        type(StringVector)   :: alias

        call alias%push_back('test')

        dict_entry = init_FieldDictEntry('test', 'units')
        @assert_that(dict_entry%standard_name, is(equal_to('test')))
        @assert_that(dict_entry%units,         is(equal_to('units')))
        @assert_that(dict_entry%long_name,     is(equal_to('test')))

        @assert_that(allocated(dict_entry%description), is(false()))
!        @assert_that(dict_entry%alias == alias,         is(true()))
    end subroutine test_init_FieldDictEntry

    @test
    subroutine add_long_name()
        type(FieldDictEntry) :: dict_entry
        type(StringVector)   :: alias
        logical              :: success

        call alias%push_back('test')

        dict_entry = init_FieldDictEntry('test', 'units')
        call dict_entry%add_long_name('test', success)
        @assert_that(dict_entry%standard_name,  is(equal_to('test')))
        @assert_that(dict_entry%units,          is(equal_to('units')))
        @assert_that(dict_entry%long_name,      is(equal_to('test')))
!        @assert_that(dict_entry%alias == alias, is(true()))
        @assert_that(success,                   is(false()))

        call dict_entry%add_long_name('test1', success)
        @assert_that(dict_entry%standard_name,  is(equal_to('test')))
        @assert_that(dict_entry%units,          is(equal_to('units')))
        @assert_that(dict_entry%long_name,      is(equal_to('test1')))
!        @assert_that(dict_entry%alias == alias, is(false()))
        @assert_that(success,                   is(true()))

        call alias%push_back('test1')
!        @assert_that(dict_entry%alias == alias, is(true()))
    end subroutine add_long_name

    @test
    subroutine add_description()
        type(FieldDictEntry) :: dict_entry

        dict_entry = init_FieldDictEntry('test', 'units')

        @assert_that(dict_entry%standard_name,  is(equal_to('test')))
        @assert_that(dict_entry%units,          is(equal_to('units')))
        @assert_that(dict_entry%long_name,      is(equal_to('test')))
        @assert_that(allocated(dict_entry%description), is(false()))

        call dict_entry%add_description('info')
        @assert_that(dict_entry%description, is(equal_to('info')))

        call dict_entry%add_description('info1')
        @assert_that(dict_entry%description, is(equal_to('info')))
    end subroutine add_description

!    @test
!    subroutine add_alias()
!        type(FieldDictEntry) :: dict_entry
!        type(StringVector)   :: alias
!        logical              :: success
!
!        call alias%push_back('test')
!
!        dict_entry = init_FieldDictEntry('test', 'units')
!        @assert_that(dict_entry%alias == alias, is(true()))
!
!        call dict_entry%add_alias('test', success)
!        @assert_that(dict_entry%alias == alias, is(true()))
!        @assert_that(success, is(false()))
!
!        call dict_entry%add_alias('test1', success)
!        @assert_that(dict_entry%alias == alias, is(false()))
!        @assert_that(success, is(true()))
!        call alias%push_back('test1')
!        @assert_that(dict_entry%alias == alias, is(true()))
!    end subroutine add_alias
end module test_FieldDictEntry